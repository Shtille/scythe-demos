#include "wall_data.h"

void GetWallData(std::vector<WallData> * wall_data, float cell_size, float base_height, float wall_width, float wall_height)
{
	const float kCS = cell_size;
	const float kBaseHeight = base_height;
	const float kWallWidth = wall_width;
	const float kWallHeight = wall_height;

	// Base wall data should be filled manually
	const WallBaseData walls_base_data[] = {
		{ -10.f * kCS,   0.f * kCS, -10.f * kCS, -10.f * kCS },
		{ -10.f * kCS, -10.f * kCS,  10.f * kCS, -10.f * kCS },
		{  10.f * kCS, -10.f * kCS,  10.f * kCS,  10.f * kCS },
		{  10.f * kCS,  10.f * kCS, -10.f * kCS,  10.f * kCS },
		{ -10.f * kCS,  10.f * kCS, -10.f * kCS,   1.f * kCS },
		// Vertical lines
		{  -9.f * kCS, -10.f * kCS,  -9.f * kCS,  -8.f * kCS },
		{  -9.f * kCS,  -6.f * kCS,  -9.f * kCS,  -4.f * kCS },
		{  -9.f * kCS,  -1.f * kCS,  -9.f * kCS,   5.f * kCS },
		{  -9.f * kCS,   6.f * kCS,  -9.f * kCS,   7.f * kCS },
		{  -9.f * kCS,   8.f * kCS,  -9.f * kCS,   9.f * kCS },
		{  -8.f * kCS,  -8.f * kCS,  -8.f * kCS,  -5.f * kCS },
		{  -8.f * kCS,  -4.f * kCS,  -8.f * kCS,   0.f * kCS },
		{  -8.f * kCS,   5.f * kCS,  -8.f * kCS,   6.f * kCS },
		{  -8.f * kCS,   7.f * kCS,  -8.f * kCS,   8.f * kCS },
		{  -8.f * kCS,   9.f * kCS,  -8.f * kCS,  10.f * kCS },
		{  -7.f * kCS,  -9.f * kCS,  -7.f * kCS,  -6.f * kCS },
		{  -7.f * kCS,  -5.f * kCS,  -7.f * kCS,  -4.f * kCS },
		{  -7.f * kCS,  -2.f * kCS,  -7.f * kCS,  -1.f * kCS },
		{  -7.f * kCS,   1.f * kCS,  -7.f * kCS,   4.f * kCS },
		{  -7.f * kCS,   8.f * kCS,  -7.f * kCS,   9.f * kCS },
		{  -6.f * kCS,  -6.f * kCS,  -6.f * kCS,  -5.f * kCS },
		{  -6.f * kCS,  -1.f * kCS,  -6.f * kCS,   1.f * kCS },
		{  -6.f * kCS,   2.f * kCS,  -6.f * kCS,   3.f * kCS },
		{  -6.f * kCS,   4.f * kCS,  -6.f * kCS,   6.f * kCS },
		{  -6.f * kCS,   7.f * kCS,  -6.f * kCS,  10.f * kCS },
		{  -5.f * kCS,  -9.f * kCS,  -5.f * kCS,  -7.f * kCS },
		{  -5.f * kCS,  -5.f * kCS,  -5.f * kCS,  -3.f * kCS },
		{  -5.f * kCS,   1.f * kCS,  -5.f * kCS,   4.f * kCS },
		{  -5.f * kCS,   6.f * kCS,  -5.f * kCS,   9.f * kCS },
		{  -4.f * kCS, -10.f * kCS,  -4.f * kCS,  -8.f * kCS },
		{  -4.f * kCS,  -6.f * kCS,  -4.f * kCS,  -5.f * kCS },
		{  -4.f * kCS,  -4.f * kCS,  -4.f * kCS,  -1.f * kCS },
		{  -4.f * kCS,   8.f * kCS,  -4.f * kCS,  10.f * kCS },
		{  -3.f * kCS,  -7.f * kCS,  -3.f * kCS,  -6.f * kCS },
		{  -3.f * kCS,  -3.f * kCS,  -3.f * kCS,   5.f * kCS },
		{  -3.f * kCS,   6.f * kCS,  -3.f * kCS,   8.f * kCS },
		{  -2.f * kCS,  -8.f * kCS,  -2.f * kCS,  -5.f * kCS },
		{  -2.f * kCS,  -4.f * kCS,  -2.f * kCS,  -3.f * kCS },
		{  -2.f * kCS,   4.f * kCS,  -2.f * kCS,   6.f * kCS },
		{  -1.f * kCS,  -9.f * kCS,  -1.f * kCS,  -4.f * kCS },
		{  -1.f * kCS,   4.f * kCS,  -1.f * kCS,   5.f * kCS },
		{   0.f * kCS, -10.f * kCS,   0.f * kCS,  -9.f * kCS },
		{   0.f * kCS,  -7.f * kCS,   0.f * kCS,  -5.f * kCS },
		{   0.f * kCS,   3.f * kCS,   0.f * kCS,   4.f * kCS },
		{   0.f * kCS,   6.f * kCS,   0.f * kCS,   8.f * kCS },
		{   1.f * kCS,  -9.f * kCS,   1.f * kCS,  -6.f * kCS },
		{   1.f * kCS,  -5.f * kCS,   1.f * kCS,  -3.f * kCS },
		{   1.f * kCS,   5.f * kCS,   1.f * kCS,   7.f * kCS },
		{   2.f * kCS,  -7.f * kCS,   2.f * kCS,  -5.f * kCS },
		{   2.f * kCS,  -4.f * kCS,   2.f * kCS,   0.f * kCS },
		{   2.f * kCS,   1.f * kCS,   2.f * kCS,   3.f * kCS },
		{   2.f * kCS,   5.f * kCS,   2.f * kCS,   6.f * kCS },
		{   2.f * kCS,   7.f * kCS,   2.f * kCS,   9.f * kCS },
		{   3.f * kCS,  -9.f * kCS,   3.f * kCS,  -6.f * kCS },
		{   3.f * kCS,  -5.f * kCS,   3.f * kCS,   2.f * kCS },
		{   3.f * kCS,   3.f * kCS,   3.f * kCS,   4.f * kCS },
		{   3.f * kCS,   5.f * kCS,   3.f * kCS,   7.f * kCS },
		{   3.f * kCS,   8.f * kCS,   3.f * kCS,   9.f * kCS },
		{   4.f * kCS,  -8.f * kCS,   4.f * kCS,  -5.f * kCS },
		{   4.f * kCS,  -4.f * kCS,   4.f * kCS,   1.f * kCS },
		{   4.f * kCS,   4.f * kCS,   4.f * kCS,   5.f * kCS },
		{   4.f * kCS,   6.f * kCS,   4.f * kCS,   9.f * kCS },
		{   5.f * kCS,  -9.f * kCS,   5.f * kCS,  -8.f * kCS },
		{   5.f * kCS,  -6.f * kCS,   5.f * kCS,   0.f * kCS },
		{   5.f * kCS,   6.f * kCS,   5.f * kCS,   8.f * kCS },
		{   6.f * kCS, -10.f * kCS,   6.f * kCS,  -9.f * kCS },
		{   6.f * kCS,  -6.f * kCS,   6.f * kCS,  -2.f * kCS },
		{   6.f * kCS,   1.f * kCS,   6.f * kCS,   2.f * kCS },
		{   6.f * kCS,   5.f * kCS,   6.f * kCS,   9.f * kCS },
		{   7.f * kCS,  -9.f * kCS,   7.f * kCS,  -6.f * kCS },
		{   7.f * kCS,  -5.f * kCS,   7.f * kCS,  -4.f * kCS },
		{   7.f * kCS,  -2.f * kCS,   7.f * kCS,   1.f * kCS },
		{   7.f * kCS,   2.f * kCS,   7.f * kCS,   6.f * kCS },
		{   8.f * kCS,  -8.f * kCS,   8.f * kCS,  -7.f * kCS },
		{   8.f * kCS,  -3.f * kCS,   8.f * kCS,  -2.f * kCS },
		{   8.f * kCS,   0.f * kCS,   8.f * kCS,   2.f * kCS },
		{   8.f * kCS,   3.f * kCS,   8.f * kCS,   8.f * kCS },
		{   9.f * kCS,  -9.f * kCS,   9.f * kCS,  -8.f * kCS },
		{   9.f * kCS,  -7.f * kCS,   9.f * kCS,   4.f * kCS },
		// Horizontal lines
		{  -8.f * kCS,  -9.f * kCS,  -6.f * kCS,  -9.f * kCS },
		{  -3.f * kCS,  -9.f * kCS,  -1.f * kCS,  -9.f * kCS },
		{   2.f * kCS,  -9.f * kCS,   5.f * kCS,  -9.f * kCS },
		{   6.f * kCS,  -9.f * kCS,   8.f * kCS,  -9.f * kCS },
		{  -9.f * kCS,  -8.f * kCS,  -8.f * kCS,  -8.f * kCS },
		{  -7.f * kCS,  -8.f * kCS,  -6.f * kCS,  -8.f * kCS },
		{  -5.f * kCS,  -8.f * kCS,  -2.f * kCS,  -8.f * kCS },
		{  -1.f * kCS,  -8.f * kCS,   1.f * kCS,  -8.f * kCS },
		{   2.f * kCS,  -8.f * kCS,   3.f * kCS,  -8.f * kCS },
		{   5.f * kCS,  -8.f * kCS,   6.f * kCS,  -8.f * kCS },
		{   8.f * kCS,  -8.f * kCS,   9.f * kCS,  -8.f * kCS },
		{ -10.f * kCS,  -7.f * kCS,  -9.f * kCS,  -7.f * kCS },
		{  -6.f * kCS,  -7.f * kCS,  -5.f * kCS,  -7.f * kCS },
		{  -4.f * kCS,  -7.f * kCS,  -3.f * kCS,  -7.f * kCS },
		{   1.f * kCS,  -7.f * kCS,   2.f * kCS,  -7.f * kCS },
		{   4.f * kCS,  -7.f * kCS,   6.f * kCS,  -7.f * kCS },
		{   8.f * kCS,  -7.f * kCS,  10.f * kCS,  -7.f * kCS },
		{  -7.f * kCS,  -6.f * kCS,  -3.f * kCS,  -6.f * kCS },
		{   6.f * kCS,  -6.f * kCS,   8.f * kCS,  -6.f * kCS },
		{  -9.f * kCS,  -5.f * kCS,  -7.f * kCS,  -5.f * kCS },
		{  -6.f * kCS,  -5.f * kCS,  -5.f * kCS,  -5.f * kCS },
		{  -3.f * kCS,  -5.f * kCS,  -2.f * kCS,  -5.f * kCS },
		{   0.f * kCS,  -5.f * kCS,   1.f * kCS,  -5.f * kCS },
		{   2.f * kCS,  -5.f * kCS,   4.f * kCS,  -5.f * kCS },
		{   7.f * kCS,  -5.f * kCS,   8.f * kCS,  -5.f * kCS },
		{  -7.f * kCS,  -4.f * kCS,  -6.f * kCS,  -4.f * kCS },
		{  -2.f * kCS,  -4.f * kCS,   0.f * kCS,  -4.f * kCS },
		{   1.f * kCS,  -4.f * kCS,   2.f * kCS,  -4.f * kCS },
		{   4.f * kCS,  -4.f * kCS,   5.f * kCS,  -4.f * kCS },
		{   7.f * kCS,  -4.f * kCS,   9.f * kCS,  -4.f * kCS },
		{ -10.f * kCS,  -3.f * kCS,  -9.f * kCS,  -3.f * kCS },
		{  -8.f * kCS,  -3.f * kCS,  -5.f * kCS,  -3.f * kCS },
		{  -3.f * kCS,  -3.f * kCS,  -2.f * kCS,  -3.f * kCS },
		{  -1.f * kCS,  -3.f * kCS,   1.f * kCS,  -3.f * kCS },
		{   6.f * kCS,  -3.f * kCS,   8.f * kCS,  -3.f * kCS },
		{ -10.f * kCS,  -2.f * kCS,  -8.f * kCS,  -2.f * kCS },
		{  -6.f * kCS,  -2.f * kCS,  -4.f * kCS,  -2.f * kCS },
		{  -3.f * kCS,  -2.f * kCS,   2.f * kCS,  -2.f * kCS },
		{   7.f * kCS,  -2.f * kCS,   8.f * kCS,  -2.f * kCS },
		{  -8.f * kCS,  -1.f * kCS,  -4.f * kCS,  -1.f * kCS },
		{   5.f * kCS,  -1.f * kCS,   6.f * kCS,  -1.f * kCS },
		{   8.f * kCS,  -1.f * kCS,   9.f * kCS,  -1.f * kCS },
		{  -7.f * kCS,   0.f * kCS,  -6.f * kCS,   0.f * kCS },
		{  -5.f * kCS,   0.f * kCS,  -3.f * kCS,   0.f * kCS },
		{   6.f * kCS,   0.f * kCS,   7.f * kCS,   0.f * kCS },
		{   7.f * kCS,   0.f * kCS,   8.f * kCS,   0.f * kCS },
		{ -10.f * kCS,   1.f * kCS,  -9.f * kCS,   1.f * kCS },
		{  -8.f * kCS,   1.f * kCS,  -7.f * kCS,   1.f * kCS },
		{  -6.f * kCS,   1.f * kCS,  -4.f * kCS,   1.f * kCS },
		{   4.f * kCS,   1.f * kCS,   6.f * kCS,   1.f * kCS },
		{  -9.f * kCS,   2.f * kCS,  -8.f * kCS,   2.f * kCS },
		{  -7.f * kCS,   2.f * kCS,  -6.f * kCS,   2.f * kCS },
		{  -5.f * kCS,   2.f * kCS,  -4.f * kCS,   2.f * kCS },
		{   3.f * kCS,   2.f * kCS,   6.f * kCS,   2.f * kCS },
		{  -8.f * kCS,   3.f * kCS,  -7.f * kCS,   3.f * kCS },
		{  -4.f * kCS,   3.f * kCS,  -3.f * kCS,   3.f * kCS },
		{  -3.f * kCS,   3.f * kCS,   7.f * kCS,   3.f * kCS },
		{   8.f * kCS,   3.f * kCS,   9.f * kCS,   3.f * kCS },
		{  -9.f * kCS,   4.f * kCS,  -8.f * kCS,   4.f * kCS },
		{  -7.f * kCS,   4.f * kCS,  -6.f * kCS,   4.f * kCS },
		{  -5.f * kCS,   4.f * kCS,  -4.f * kCS,   4.f * kCS },
		{  -2.f * kCS,   4.f * kCS,  -1.f * kCS,   4.f * kCS },
		{   0.f * kCS,   4.f * kCS,   2.f * kCS,   4.f * kCS },
		{   4.f * kCS,   4.f * kCS,   6.f * kCS,   4.f * kCS },
		{  -8.f * kCS,   5.f * kCS,  -7.f * kCS,   5.f * kCS },
		{  -6.f * kCS,   5.f * kCS,  -3.f * kCS,   5.f * kCS },
		{  -1.f * kCS,   5.f * kCS,   1.f * kCS,   5.f * kCS },
		{   2.f * kCS,   5.f * kCS,   6.f * kCS,   5.f * kCS },
		{   9.f * kCS,   5.f * kCS,  10.f * kCS,   5.f * kCS },
		{  -9.f * kCS,   6.f * kCS,  -8.f * kCS,   6.f * kCS },
		{  -7.f * kCS,   6.f * kCS,  -6.f * kCS,   6.f * kCS },
		{  -4.f * kCS,   6.f * kCS,  -3.f * kCS,   6.f * kCS },
		{  -2.f * kCS,   6.f * kCS,   0.f * kCS,   6.f * kCS },
		{   4.f * kCS,   6.f * kCS,   5.f * kCS,   6.f * kCS },
		{   7.f * kCS,   6.f * kCS,   8.f * kCS,   6.f * kCS },
		{   8.f * kCS,   6.f * kCS,   9.f * kCS,   6.f * kCS },
		{ -10.f * kCS,   7.f * kCS,  -9.f * kCS,   7.f * kCS },
		{  -8.f * kCS,   7.f * kCS,  -5.f * kCS,   7.f * kCS },
		{  -5.f * kCS,   7.f * kCS,  -4.f * kCS,   7.f * kCS },
		{  -3.f * kCS,   7.f * kCS,  -1.f * kCS,   7.f * kCS },
		{   1.f * kCS,   7.f * kCS,   3.f * kCS,   7.f * kCS },
		{   6.f * kCS,   7.f * kCS,   7.f * kCS,   7.f * kCS },
		{   9.f * kCS,   7.f * kCS,  10.f * kCS,   7.f * kCS },
		{  -9.f * kCS,   8.f * kCS,  -8.f * kCS,   8.f * kCS },
		{  -4.f * kCS,   8.f * kCS,  -3.f * kCS,   8.f * kCS },
		{  -2.f * kCS,   8.f * kCS,   1.f * kCS,   8.f * kCS },
		{   7.f * kCS,   8.f * kCS,   9.f * kCS,   8.f * kCS },
		{  -8.f * kCS,   9.f * kCS,  -7.f * kCS,   9.f * kCS },
		{  -3.f * kCS,   9.f * kCS,   3.f * kCS,   9.f * kCS },
		{   4.f * kCS,   9.f * kCS,  10.f * kCS,   9.f * kCS },
	};
	// Fill the wall data
	wall_data->resize(sizeof(walls_base_data) / sizeof(walls_base_data[0]));
	for (size_t i = 0; i < wall_data->size(); ++i)
	{
		WallData& data = (*wall_data)[i];
		const WallBaseData& base_data = walls_base_data[i];
		data.center.x = 0.5f * (base_data.end_y + base_data.start_y);
		data.center.y = 0.5f * kWallHeight + kBaseHeight;
		data.center.z = 0.5f * (base_data.end_x + base_data.start_x);
		// Different filling based on orientation
		if (base_data.end_y - base_data.start_y < 0.1f) // horizontal
		{
			data.sizes.x = 0.5f * (base_data.end_y - base_data.start_y + kWallWidth);
			data.sizes.y = 0.5f * kWallHeight;
			data.sizes.z = 0.5f * (base_data.end_x - base_data.start_x - kWallWidth);
		}
		else // vertical
		{
			data.sizes.x = 0.5f * (base_data.end_y - base_data.start_y - kWallWidth);
			data.sizes.y = 0.5f * kWallHeight;
			data.sizes.z = 0.5f * (base_data.end_x - base_data.start_x + kWallWidth);
		}
	}
}